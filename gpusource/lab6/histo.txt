
#include    <wb.h>

#define HISTOGRAM_LENGTH 256

//@@ insert code here

int main(int argc, char ** argv) {
    wbArg_t args;
    int imageWidth;
    int imageHeight;
    int imageChannels;
    wbImage_t inputImage;
    wbImage_t outputImage;
    float * hostInputImageData;
    float * hostOutputImageData;
    const char * inputImageFile;

    //@@ Insert more code here

    args = wbArg_read(argc, argv); /* parse the input arguments */

    inputImageFile = wbArg_getInputFile(args, 0);

    wbTime_start(Generic, "Importing data and creating memory on host");
    inputImage = wbImport(inputImageFile);
    imageWidth = wbImage_getWidth(inputImage);
    imageHeight = wbImage_getHeight(inputImage);
    imageChannels = wbImage_getChannels(inputImage);
    outputImage = wbImage_new(imageWidth, imageHeight, imageChannels);
    wbTime_stop(Generic, "Importing data and creating memory on host");

    //@@ insert code here

    wbSolution(args, outputImage);

    //@@ insert code here

    return 0;
}


The purpose of this lab is to implement an efficient histogramming equalization algorithm for an input image. Like the image convolution MP, the image is represented as RGB float values. You will convert that to GrayScale unsigned char values and compute the histogram. Based on the histogram, you will compute a histogram equalization function which you will then apply to the original image to get the color corrected image.




Cast the image from float to unsigned char

Implement a kernel that casts the image from float * to unsigned char *.
for ii from 0 to (width * height * channels) do
    ucharImage[ii] = (unsigned char) (255 * inputImage[ii])
end


Convert the image from RGB to GrayScale

Implement a kernel that converts the the RGB image to GrayScale
for ii from 0 to height do
    for jj from 0 to width do
        idx = ii * width + jj
        # here channels is 3
        r = ucharImage[3*idx]
        g = ucharImage[3*idx + 1]
        b = ucharImage[3*idx + 2]
        grayImage[idx] = (unsigned char) (0.21*r + 0.71*g + 0.07*b)
    end
end


Compute the histogram of grayImage

Implement a kernel that computes the histogram (like in the lectures) of the image.
histogram = [0, ...., 0] # here len(histogram) = 256
for ii from 0 to width * height do
    histogram[grayImage[idx]]++
end


Compute the Comulative Distribution Function of histogram

This is a scan operation like you have done in the previous lab
cdf[0] = p(histogram[0])
for ii from 1 to 256 do
    cdf[ii] = cdf[ii - 1] + p(histogram[ii])
end


Where p is the probability of a pixel to be in a hitogram bin
def p(x):
    return x / (width * height)
end


Compute the minimum value of the CDF

This is a reduction operation using the min function
cdfmin = cdf[0]
for ii from 1 to 256 do
    cdfmin = min(cdfmin, cdf[ii])
end


Define the histogram equalization function

The histogram equalization function (correct) remaps the cdf of the histogram of the image to a linear function and is defined as
def correct_color(val) 
    return clamp(255*(cdf[val] - cdfmin)/(1 - cdfmin), 0, 255)
end


Use the same clamp function you used in the Image Convolution MP.
def clamp(x, start, end)
    return min(max(x, start), end)
end


Apply the histogram equalization function

Once you have implemented all of the above, then you are ready to correct the input image
for ii from 0 to (width * height * channels) do
    ucharImage[ii] = correct_color(ucharImage[ii])
end


Cast back to float
for ii from 0 to (width * height * channels) do
    outputImage[ii] = (float) (ucharImage[ii]/255.0)
end


And you’re done



#include    <wb.h>


-
}
#define wbCheck(stmt) do {                                                    \
        cudaError_t err = stmt;                                               \
        if (err != cudaSuccess) {                                             \
            wbLog(ERROR, "Failed to run stmt ", #stmt);                       \
            wbLog(ERROR, "Got CUDA error ...  ", cudaGetErrorString(err));    \
            return -1;                                                        \
        }                                                                     \
    } while(0)



#define MASK_WIDTH  5
#define MASK_RAD MASK_WIDTH/2
#define TILE_WIDTH 16
#define smWidth (TILE_WIDTH + MASK_WIDTH - 1)
#define clamp(x) (min(max((x), 0.0), 1.0))

//@@ INSERT CODE HERE
__global__ void convolution(float *I, const float* __restrict__ M, float *P, int imgChannels, int width, int height) 
{
   
  // tile in shared memory - we will move data here from the input image
   __shared__ float N_ds[smWidth][smWidth];

  // do each rgb channel    
  for (int c = 0; c < imgChannels; c++) 
  {
    // loading based on x and y thread dest is shared mem
    int dest = threadIdx.y * TILE_WIDTH + threadIdx.x;
    int destY = dest / smWidth;
    int destX = dest % smWidth;

    // address in the input array account for mask size
    int srcY = blockIdx.y * TILE_WIDTH + destY - MASK_RAD;
    int srcX = blockIdx.x * TILE_WIDTH + destX - MASK_RAD;

    // each pixel has 3 channels (rgb) hence mult by num channels
    int src = (srcY * width + srcX) * imgChannels + c;

    // set any points out of range to 0 
    if (srcY >= 0 && srcY < height && srcX >= 0 && srcX < width)
       N_ds[destY][destX] = I[src];
    else
       N_ds[destY][destX] = 0;

    // get the other bytes needed for the convoltion calc i.e. that on skirts/halo
    dest = threadIdx.y * TILE_WIDTH + threadIdx.x + TILE_WIDTH * TILE_WIDTH;
    destY = dest / smWidth;
    destX = dest % smWidth;

    srcY = blockIdx.y * TILE_WIDTH + destY - MASK_RAD;
    srcX = blockIdx.x * TILE_WIDTH + destX - MASK_RAD;

    src = (srcY * width + srcX) * imgChannels + c;

    if (destY < smWidth) 
    {
       if (srcY >= 0 && srcY < height && srcX >= 0 && srcX < width)
          N_ds[destY][destX] = I[src];
       else
          N_ds[destY][destX] = 0;
    }

    __syncthreads();

    float accum = 0;
    
    // mask is square  do the convolution calc
    for (int i = 0; i < MASK_WIDTH; i++)
    {
       for (int j = 0; j < MASK_WIDTH; j++)
       {
          accum += N_ds[threadIdx.y + i][threadIdx.x + j] * M[i * MASK_WIDTH + j];
       }
    }
    int y, x;
    y = blockIdx.y * TILE_WIDTH + threadIdx.y;
    x = blockIdx.x * TILE_WIDTH + threadIdx.x;

    if (y < height && x < width)
    {
       P[(y * width + x) * imgChannels + c] = clamp(accum);
    }

    __syncthreads();
  }
}



int main(int argc, char* argv[]) {
    wbArg_t args;
    int maskRows;
    int maskColumns;
    int imageChannels;
    int imageWidth;
    int imageHeight;
    char * inputImageFile;
    char * inputMaskFile;
    wbImage_t inputImage;
    wbImage_t outputImage;
    float * hostInputImageData;
    float * hostOutputImageData;
    float * hostMaskData;
    float * deviceInputImageData;
    float * deviceOutputImageData;
    float * deviceMaskData;

    args = wbArg_read(argc, argv); /* parse the input arguments */

    inputImageFile = wbArg_getInputFile(args, 0);
    inputMaskFile = wbArg_getInputFile(args, 1);

    inputImage = wbImport(inputImageFile);
    hostMaskData = (float *) wbImport(inputMaskFile, &maskRows, &maskColumns);

    assert(maskRows == 5); /* mask height is fixed to 5 in this mp */
    assert(maskColumns == 5); /* mask width is fixed to 5 in this mp */

    imageWidth = wbImage_getWidth(inputImage);
    imageHeight = wbImage_getHeight(inputImage);
    imageChannels = wbImage_getChannels(inputImage);

    outputImage = wbImage_new(imageWidth, imageHeight, imageChannels);

    hostInputImageData = wbImage_getData(inputImage);
    hostOutputImageData = wbImage_getData(outputImage);

    wbTime_start(GPU, "Doing GPU Computation (memory + compute)");

    wbTime_start(GPU, "Doing GPU memory allocation");
    cudaMalloc((void **) &deviceInputImageData, imageWidth * imageHeight * imageChannels * sizeof(float));
    cudaMalloc((void **) &deviceOutputImageData, imageWidth * imageHeight * imageChannels * sizeof(float));
    cudaMalloc((void **) &deviceMaskData, maskRows * maskColumns * sizeof(float));
    wbTime_stop(GPU, "Doing GPU memory allocation");


    wbTime_start(Copy, "Copying data to the GPU");
    cudaMemcpy(deviceInputImageData,
               hostInputImageData,
               imageWidth * imageHeight * imageChannels * sizeof(float),
               cudaMemcpyHostToDevice);
    cudaMemcpy(deviceMaskData,
               hostMaskData,
               maskRows * maskColumns * sizeof(float),
               cudaMemcpyHostToDevice);
    wbTime_stop(Copy, "Copying data to the GPU");


    wbTime_start(Compute, "Doing the computation on the GPU");
	
	dim3 dimGrid(ceil((float)imageWidth/TILE_WIDTH), ceil((float)imageHeight/TILE_WIDTH));
    dim3 dimBlock(TILE_WIDTH, TILE_WIDTH, 1);
    convolution<<<dimGrid, dimBlock>>>(deviceInputImageData, deviceMaskData, deviceOutputImageData, imageChannels, imageWidth, imageHeight);
	
    wbTime_stop(Compute, "Doing the computation on the GPU");


    wbTime_start(Copy, "Copying data from the GPU");
    cudaMemcpy(hostOutputImageData,
               deviceOutputImageData,
               imageWidth * imageHeight * imageChannels * sizeof(float),
               cudaMemcpyDeviceToHost);
    wbTime_stop(Copy, "Copying data from the GPU");

    wbTime_stop(GPU, "Doing GPU Computation (memory + compute)");

    wbSolution(args, outputImage);

    cudaFree(deviceInputImageData);
    cudaFree(deviceOutputImageData);
    cudaFree(deviceMaskData);

    free(hostMaskData);
    wbImage_delete(outputImage);
    wbImage_delete(inputImage);

    return 0;